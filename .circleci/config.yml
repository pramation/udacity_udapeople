version: 2.1 
orbs:
  slack: circleci/slack@4.9.3 

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID
    parameters:
      workflow-id:
        type: string
        default: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name project4-udapeople-backend-stak-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name project4-udapeople-frontend-stak-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-project4-${CIRCLE_WORKFLOW_ID:0:7} --recursive
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-cache]
      - run:
          name: "Build Frontend"
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-cache                 
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: "Build Backend"
          command: | 
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-cache
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: "Test Frontend"
          command: |
             cd frontend
             npm install
             npm run test
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Test Backend"
          command: | 
              cd backend
              npm install 
              npm run test
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
# Invoke jobs via workflows
  scan-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: "Install dependencies Backend"
          command: | 
              cd frontend
              npm install 
      - run:
          name: "Audit Packages Frontend"
          command: | 
              cd frontend
              npm audit fix --audit-level=critical --force 
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1

  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: "Install dependencies Backend"
          command: | 
              cd backend
              npm install 
      - run:
          name: "Audit Packages Backend"
          command: | 
              cd backend
              npm audit fix --audit-level=critical --force
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install required utilities
          command: |
             yum install tar -y
             yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="project4-udapeople-be-tag-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "project4-udapeople-backend-stak-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="project4-${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="project4-udapeople-FE-tag-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "project4-udapeople-frontend-stak-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="project4-${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-project4-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
          
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt
          command: |
            cat .circleci/ansible/inventory.txt
      - destroy-environment:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"     

  #Configure Infrastructure
  configure-infrastructure:
    docker:
      # Docker image that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "41:99:c0:f0:e0:26:82:51:4e:26:cd:16:7d:05:90:36"
      - attach_workspace:
          at: .     
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip
            pip install awscli
      - run:
          name: Configure server
          command: |
            pwd
            cat ./.circleci/ansible/inventory.txt
            ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/configure-server.yml
  
  run-migrations:
    docker:
      # Docker image that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - attach_workspace:
          at: .
      - run:
          name: install required software
          command: |
             sudo apt-get -y -qq update
             sudo apt-get -y -qq install python3   
             sudo apt-get -qq install awscli         
      - run:
          name: Run Migrations
          command: |
            cd ./backend
            npm install
            npm run migrations > migrations_dump.txt
            cat ./migrations_dump.txt
      - run:
          name: Send migration result to memstash
          command: |
            if grep -q "has been executed successfully" ./backend/migrations_dump.txt;
            then
              echo "Database migration has been completed successfully"
              #curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "success" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID:0:7}
               curl -k https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "Database migration has failed"
              #curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "failed" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID:0:7}
              curl -k https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      - destroy-environment:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend:
    docker:
      # Docker image that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - attach_workspace:
          at: .
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-project4-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo $BACKEND_IP > .circleci/ansible/backend-host-ip
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" 
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i 
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./frontend/dist "s3://udapeople-project4-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - ./frontend/dist
      - destroy-environment:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-backend:
    docker:
      # Docker image that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "41:99:c0:f0:e0:26:82:51:4e:26:cd:16:7d:05:90:36"
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --no-cache curl
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
      # Lightweight Docker image 
    steps:
      - checkout
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            cat ./.circleci/ansible/backend-host-ip
            backend_ip=$(cat .circleci/ansible/backend-host-ip)
            echo "http://$backend_ip:3030"          
      - run:
          name: Frontend smoke test.
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
               return 0
            else
               return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
             # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - destroy-environment
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:   
            requires: [build-frontend]
      - test-backend:
            requires: [build-backend]
      - scan-frontend:   
            requires: [build-frontend]
      - scan-backend:
            requires: [build-backend]
      - deploy-infrastructure:
            requires: [test-frontend,test-backend,scan-frontend,scan-backend]
            filters:
              branches:
                 only: [circleci-editor/888/main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
