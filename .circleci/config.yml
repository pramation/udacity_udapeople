version: 2.1 
orbs:
  slack: circleci/slack@4.9.3 

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID
    parameters:
      workflow-id:
        type: string
        default: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environment and delete s3 bucket
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-project4-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-project4-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-project4-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 rb s3://udapeople-project4-${CIRCLE_WORKFLOW_ID:0:7} --force
  revert-migrations:
    description: Revert the last migration.
    parameters:
      workflow-id:
        type: string
        default: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
              echo "b4 success"
              SUCCESS=$(curl --insecure https://kvdb.io/PbgDBZHQTuAUT9SR54qYoC/migration_${CIRCLE_WORKFLOW_ID:0:7})
              echo "after success"
              echo "${SUCCESS}"
              if  "${SUCCESS}"=="1"; 
              then
                 echo "Reverting the changes"
                 cd ./backend
                 npm install
                 npm run migrations:revert
              else
                 echo "migration to kvdb did not happen"
              fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-cache]
      - run:
          name: "Build Frontend"
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-cache                 
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: "Build Backend"
          command: | 
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-cache
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: "Test Frontend"
          command: |
             cd frontend
             npm install
             npm run test
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Test Backend"
          command: | 
              cd backend
              npm install 
              npm run test
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
# Invoke jobs via workflows
  scan-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: "Install dependencies Backend"
          command: | 
              cd frontend
              npm install 
      - run:
          name: "Audit Packages Frontend"
          command: | 
              cd frontend
              npm audit fix --audit-level=critical --force 
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1

  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: "Install dependencies Backend"
          command: | 
              cd backend
              npm install 
      - run:
          name: "Audit Packages Backend"
          command: | 
              cd backend
              npm audit fix --audit-level=critical --force
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install required utilities
          command: |
             yum install tar -y
             yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="project4-udapeople-be-tag-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-backend-project4-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="project4-${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="project4-udapeople-FE-tag-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "udapeople-frontend-project4-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="project4-${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-project4-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
          
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt
          command: |
            cat .circleci/ansible/inventory.txt
      - destroy-environment:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"     

  #Configure Infrastructure
  configure-infrastructure:
    docker:
      # Docker image that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "41:99:c0:f0:e0:26:82:51:4e:26:cd:16:7d:05:90:36"
      - attach_workspace:
          at: .     
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip
            pip install awscli
      - run:
          name: Configure server
          command: |
            pwd
            cat ./.circleci/ansible/inventory.txt
            ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/configure-server.yml
  
  run-migrations:
    docker:
      # Docker image that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - attach_workspace:
          at: .
      - run:
          name: install required software
          command: |
             sudo apt-get -y -qq update
             sudo apt-get -y -qq install python3   
             sudo apt-get -qq install awscli         
      - run:
          name: Run Migrations
          command: |
            cd ./backend
            npm install
            npm run migrations > migrations_dump.txt
            cat ./migrations_dump.txt
      - run:
          name: Send migration result to kvdb.io
          command: |
            cat ./backend/migrations_dump.txt
            if grep -q "has been executed successfully" ./backend/migrations_dump.txt;
            then
              echo "Database migration has been completed successfully"
              #curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "success" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID:0:7}
               curl -k https://kvdb.io/PbgDBZHQTuAUT9SR54qYoC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "Database migration has failed"
              #curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "failed" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID:0:7}
              curl -k https://kvdb.io/PbgDBZHQTuAUT9SR54qYoC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      - destroy-environment:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend:
    docker:
      # Docker image that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - attach_workspace:
          at: .
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-project4-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo $BACKEND_IP > .circleci/ansible/backend-host-ip
            cd frontend
            echo API_URL="http://${BACKEND_IP}:3030" >> .env
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" 
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install 
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist "s3://udapeople-project4-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - ./frontend/dist
      - destroy-environment:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
  
  deploy-backend:
    docker:
      # Docker image that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "41:99:c0:f0:e0:26:82:51:4e:26:cd:16:7d:05:90:36"
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies 
          command: |
            apk add --update ansible
            apk add --no-cache curl
            apk add --update tar gzip
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - run:
          name: Set up inventory.txt
          command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-project4-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          no_output_timeout: 5m
          command: |
            # Zip the directory
            #tar -C backend -czvf artifact.tar.gz .
            tar czf backend.tar.gz backend/
            ls
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is --------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i inventory.txt deploy-backend.yml 
      - destroy-environment:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
      # Lightweight Docker image 
    steps:
      - checkout
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            #cat ./.circleci/ansible/backend-host-ip
            #backend_ip=$(cat .circleci/ansible/backend-host-ip)
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-project4-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/backend-host-ip
            cat .circleci/ansible/backend-host-ip        
      - run:
          name: Backend smoke test.
          command: |
            cat .circleci/ansible/backend-host-ip 
            export BACKEND_IP=`cat .circleci/ansible/backend-host-ip`
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
               return 0
            else
               return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-project4-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
             # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow-id: "project4-${CIRCLE_WORKFLOW_ID:0:7}"
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip python3-pip curl 
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --tags project=udapeople-project4 \
                    --stack-name udapeople-cloudfront-project4-${CIRCLE_WORKFLOW_ID:0:7} \
                    --parameter-overrides WorkflowID="project4-${CIRCLE_WORKFLOW_ID:0:7}"
            echo "Current Workflow ID: project4-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"     
            echo "${OldWorkflowID}">OldWorkflowID.txt
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              #export OldWorkflowID= `cat OldWorkflowID.txt`
              echo OldWorkflowID: "${OldWorkflowID}"

              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              echo "Executing ...  aws s3 rm s3://udapeople-${OldWorkflowID} --recursive ..."
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              echo "Executing ... aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              echo "Executing... aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - destroy-environment
      - revert-migrations
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:   
            requires: [build-frontend]
      - test-backend:
            requires: [build-backend]
      - scan-frontend:   
            requires: [build-frontend]
      - scan-backend:
            requires: [build-backend]
      - deploy-infrastructure:
            requires: [test-frontend,test-backend,scan-frontend,scan-backend]
            filters:
              branches:
                 only: [circleci-editor/888/main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
