version: 2.1
orbs:
  slack: circleci/slack@4.9.3 
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Build Frontend"
          command: |
             cd frontend
             npm install
             npm run build
                      
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Build Backend"
          command: | 
              cd backend
              npm install
              npm run build
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Test Frontend"
          command: |
             cd frontend
             npm install
             npm run test
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Test Backend"
          command: | 
              cd backend
              npm install 
              npm run test
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1
# Invoke jobs via workflows
  scan-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: "Install dependencies Backend"
          command: | 
              cd frontend
              npm install 
      - run:
          name: "Audit Packages Frontend"
          command: | 
              cd frontend
              npm audit fix --audit-level=critical --force 
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1

  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - run:
          name: "Install dependencies Backend"
          command: | 
              cd backend
              npm install 
      - run:
          name: "Audit Packages Backend"
          command: | 
              cd backend
              npm audit fix --audit-level=critical --force
      - slack/notify:
           branch_pattern: .+
           event: fail
           channel: $SLACK_DEFAULT_CHANNEL
           template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install required utilities
          command: |
             yum install tar -y
             yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="project4-udapeople-BE-tag-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "project4-udapeople-backend-stak-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="project4-be-${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="project4-udapeople-FE-tag-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "project4-udapeople-frontend-stak-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="project4-fe-${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=project4-be-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt  
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:   
            requires: [build-frontend]
      - test-backend:
            requires: [build-backend]
      - scan-frontend:   
            requires: [build-frontend]
      - scan-backend:
            requires: [build-backend]
      - deploy-infrastructure:
            requires: [test-frontend,test-backend,scan-frontend,scan-backend]
            filters:
              branches:
                 only: [circleci-editor/888/main]
